#!/bin/bash -eu

function usage
{
	cat <<END
$0 [-c CPU_REQUEST] [-C CPU_LIMIT] [-m MEMORY_REQUEST] [-M MEMORY_LIMIT] [ -l ] POD_NAME "COMMAND"
END
}

CHECK_LOG=${CHECK_LOG:-0}

while getopts "c:C:m:M:l" OPT
do
	case $OPT in
		c)
			CPU_REQUEST=$OPTARG
			;;
		C)
			CPU_LIMIT=$OPTARG
			;;
		m)
			MEMORY_REQUEST=$OPTARG
			;;
		M)
			MEMORY_LIMIT=$OPTARG
			;;
		l)
			CHECK_LOG=1
			;;
		*)
			usage
			;;
	esac

done

POD_NAME=$(echo ${@:$OPTIND:1} | $WORKBENCH_DIR/scripts/kubesanitize)
POD_CMD=${@:$(($OPTIND+1)):1}

if [ $CHECK_LOG -eq 1 -a -f $WORKDIR/logs/$POD_NAME.log ]
then
	echo "[*] Skipping $POD_NAME creation because the completion log is already there."
	exit
fi

mkdir -p $WORKDIR/pods
PODPATH=$WORKDIR/pods/$POD_NAME.yml

cat <<END >$PODPATH
apiVersion: v1
kind: Pod
metadata:
  name: $POD_NAME
  namespace: $EXPERIMENT
spec:
  containers:
    - name: $POD_NAME
      command:
        - "/bin/bash"
        - "-c"
        - "$POD_CMD"
      image: $DOCKER_IMG
      imagePullPolicy: Always
      stdin: true
      tty: true
      volumeMounts:
        - name: results
          mountPath: "/results"
      resources:
        limits:
          cpu: $CPU_LIMIT
          memory: $MEMORY_LIMIT
        requests:
          cpu: $CPU_REQUEST
          memory: $MEMORY_REQUEST
  restartPolicy: Never
  imagePullSecrets:
    - name: docker-secret
  volumes:
  - name: results
END

if [ "$RESULT_DEST" == "nfs" -o "$RESULT_DEST" == "gce" ]
then
	cat <<END >>$PODPATH
    persistentVolumeClaim:
      claimName: $EXPERIMENT-nfs
END
else
	cat <<END >>$PODPATH
    emptyDir: {}
END
fi

#[ "$RESULT_DEST" == "gce" ] && cat <<END >>$PODPATH
#    gcePersistentDisk:
#      pdName: $GCE_DISK_NAME
#      fsType: ext4
#END

kubectl create -f $PODPATH
