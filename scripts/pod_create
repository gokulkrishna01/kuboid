#!/bin/bash -eu

function usage
{
	cat <<END
$0 [-c CPU_REQUEST] [-C CPU_LIMIT] [-m MEMORY_REQUEST] [-M MEMORY_LIMIT] [-v VOLUME] [-i IMAGE] [ -l LOGDIR ] [ -n POD_NAME ] [ -w WORKDIR ] [ -p POD_PREFIX ] COMMAND
END
}

LOGDIR=${LOGDIR-}
NFS=${NFS-}
IMAGE=${IMAGE-ubuntu}
CPU_REQUEST=${CPU_REQUEST:-900m}
CPU_LIMIT=${CPU_LIMIT:-1000m}
MEMORY_REQUEST=${MEMORY_REQUEST:-2Gi}
MEMORY_LIMIT=${MEMORY_LIMIT:-4Gi}
POD_NAME=${POD_NAME-}
POD_PREFIX=${POD_PREFIX-}
WORKDIR=${WORKDIR-}
VOLUME=${VOLUME-}

while getopts "c:C:m:M:l:n:i:w:p:" OPT
do
	case $OPT in
		c)
			CPU_REQUEST=$OPTARG
			;;
		C)
			CPU_LIMIT=$OPTARG
			;;
		m)
			MEMORY_REQUEST=$OPTARG
			;;
		M)
			MEMORY_LIMIT=$OPTARG
			;;
		i)
			IMAGE=$OPTARG
			;;
		l)
			LOGDIR=$OPTARG
			;;
		v)
			VOLUME=$OPTARG
			;;
		n)
			POD_NAME=$OPTARG
			;;
		p)
			POD_PREFIX=$OPTARG
			;;
		w)
			WORKDIR=$OPTARG
			;;
		*)
			usage
			;;
	esac
done

WORKDIR=${WORKDIR:-/tmp/workbench}
mkdir -p $WORKDIR

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
shift $(($OPTIND-1))
POD_CMD="$@"

POD_NAME=${POD_NAME:-$POD_CMD}
POD_NAME=${POD_NAME:-$POD_CMD}
[ -n "$POD_PREFIX" ] && POD_NAME=$POD_PREFIX-$POD_NAME
POD_NAME=$(echo $POD_NAME | $SCRIPT_DIR/kubesanitize)

if [ -n "$LOGDIR" -a -f $LOGDIR/$POD_NAME ]
then
	echo "[*] Skipping $POD_NAME creation because the completion log is already there."
	exit
fi

mkdir -p $WORKDIR/pods
PODPATH=$WORKDIR/pods/$POD_NAME.yml

cat <<END >$PODPATH
apiVersion: v1
kind: Pod
metadata:
  name: $POD_NAME
spec:
  containers:
    - name: $POD_NAME
      command:
        - "/bin/bash"
        - "-c"
        - "$POD_CMD"
      image: $IMAGE
      imagePullPolicy: Always
      stdin: true
      tty: true
      volumeMounts:
        - name: shared
          mountPath: "/shared"
      resources:
        limits:
          cpu: $CPU_LIMIT
          memory: $MEMORY_LIMIT
        requests:
          cpu: $CPU_REQUEST
          memory: $MEMORY_REQUEST
  restartPolicy: Never
  imagePullSecrets:
    - name: docker-secret
  volumes:
  - name: shared
END

if [ -n "$VOLUME" ]
then
	cat <<END >>$PODPATH
    persistentVolumeClaim:
      claimName: $VOLUME
END
else
	cat <<END >>$PODPATH
    emptyDir: {}
END
fi

kubectl create -f $PODPATH
