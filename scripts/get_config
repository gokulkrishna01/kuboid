#!/bin/bash -e
# dumps a config from a secret
# based almost fully on: https://gist.github.com/so0k/8fad3b1639b3d70cd841703fda67f16b

OUTPUT=token-conf

if [ -z "$1" ]
then
	secret=$(kubectl get secrets | grep default | awk '{print $1}')
else
	secret=$1
fi
echo "secret = ${secret}"


kubectl get secret ${secret} -o json | jq -r '.data["ca.crt"]' | base64 -d > /tmp/ca.crt
user_token=$(kubectl get secret ${secret} -o json | jq -r '.data["token"]' | base64 -d)
echo "token = ${user_token}"

c=`kubectl config current-context`
echo "context = $c"

cluster_name=`kubectl config get-contexts $c | awk '{print $3}' | tail -n 1`
echo "cluster_name= ${cluster_name}"

endpoint=`kubectl config view -o jsonpath="{.clusters[?(@.name == \"${cluster_name}\")].cluster.server}"`
echo "endpoint = ${endpoint}"

echo "preparing k8s-${user}-conf"
KUBECONFIG=$OUTPUT kubectl config set-cluster ${cluster_name} --embed-certs=true --server=${endpoint} --certificate-authority=/tmp/ca.crt
KUBECONFIG=$OUTPUT kubectl config set-credentials ${cluster_name#cluster-} --token=${user_token}
KUBECONFIG=$OUTPUT kubectl config set-context ${cluster_name#cluster-} --cluster=${cluster_name} --user=${cluster_name#cluster-}
KUBECONFIG=$OUTPUT kubectl config use-context ${cluster_name#cluster-}

echo "done! Test with: "
echo "KUBECONFIG=$OUTPUT kubectl get no"
