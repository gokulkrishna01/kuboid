#!/bin/bash -eu

AFL_TWEAKS=0
SAVE_LOGS=0

function usage
{
	cat <<END
$0 [-as]

Options:
	-a		Make sure nodes have AFL kernel tweaks applied.
	-s		Save logs of completed pods.
END
	exit 1
}

while getopts "as" OPT
do
	case $OPT in
		a)
			AFL_TWEAKS=1
			;;
		s)
			SAVE_LOGS=1
			;;
		*)
			usage
			;;
	esac
done

WORKBENCH_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
SCRIPT_DIR=$WORKBENCH_DIR/scripts
KNOWN_NODES=""

echo "[*] Engaging monitor loop."
while true
do
	# check for new nodes
	NODES_CHANGED=0
	PREV_NODES=$KNOWN_NODES
	KNOWN_NODES=$($SCRIPT_DIR/node_names)
	if [ "$PREV_NODES" != "$KNOWN_NODES" ]
	then
		echo "[*] New nodes identified!"
		echo "[+] Old nodes: $PREV_NODES"
		echo "[+] New nodes: $KNOWN_NODES"
		NODES_CHANGED=1
	fi

	if [ $AFL_TWEAKS -eq 1 -a $NODES_CHANGED -eq 1 ]
	then
		echo "[*] Applying AFL tweaks to nodes."
		set +e
		$SCRIPT_DIR/afl_tweaks 2>&1 | grep -v "^1$"
		set -e
		echo "[*] AFL tweaks applied."
	fi

	if [ $SAVE_LOGS -eq 1 ]
	then
		mkdir -p $WORKDIR/logs
		ls $WORKDIR/logs | sed -e "s/\.log$//" > /tmp/$$-logged-pods
		# cat is here to avoid the failed grep
		pod_names -ce | grep -v -f /tmp/$$-logged-pods | cat > /tmp/$$-new-pods 
		NEW_COUNT=$(cat /tmp/$$-new-pods | wc -l)

		if [ $NEW_COUNT -gt 0 ]
		then
			echo "[*] Saving logs for $NEW_COUNT newly-completed pods!"
			cat /tmp/$$-new-pods | pods_savelog $WORKDIR/logs
			echo "[*] Saved."
		fi

		rm -f /tmp/$$-new-pods /tmp/$$-logged-pods
	fi

	#echo "[*] Sleeping for 5 seconds..."
	#sleep 5
done
